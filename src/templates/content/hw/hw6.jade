:markdown
  Homework 6: Autocomplete
  =====================================

  Due _Tuesday, November 18 at 9 AM_.

  Implementation stub available in the
  [homework repository](https://github.com/cis197s14/hw/blob/master/hw6/).

  This assignment will tie up what you've learned about classes, promises, Backbone,
  and jQuery into a single widget: an autocompleter (much like the one that is used
  for [Penn Course Review](https://penncoursereview.com/)).

  ### Before starting the assignment

  Review the docs for [Backbone Views](http://backbonejs.org/#View),
  the [Bluebird promise API](https://github.com/petkaantonov/bluebird/blob/master/API.md),
  and [jQuery's <code>.get</code> function](https://api.jquery.com/jQuery.get/).

  ### Running the code

  You may need the [http-server](https://www.npmjs.org/package/http-server) npm package in order
  to run this code because of protocol restrictions (in some browsers, you cannot make an AJAX HTTP
  request from a filesystem HTML page). Install it with <code>npm install -g http-server</code> and
  run it from you project directory with <code> http-server ./</code>.

  ### Part 1: Tries (trie.js)

  The first thing we'll need to write the autocompleter is an efficient way to store the
  valid words to match. The correct data structure here is called a *trie* (short for
  re*trie*val), and if you've taken CIS 121, you're already familiar with it. Just in case
  you're rusty, though, here's an [excellent article](http://exceptional-code.blogspot.com/2011/07/coding-up-trie-prefix-tree.html)
  to help jog your memory. _In order to simplify the implementation, we will be using upper-case only.
  All words should be converted using <code>toUpperCase()</code> before adding or retreiving._

  JavaScript conveniently has hashes (object literals) built right in - we'll use them for
  the nodes of our simple trie. The top-level node of the trie (<code>this.data</code> in the stub)
  starts out as an empty object. Your job is to implement the <code>addWord</code> and
  <code>getSuggestions</code> functions.

  ___TODO___: Implement <code>addWord</code>. 

  The pseudocode for adding an element to a node in the trie is:
  <pre>
  addWord(word, trieNode) =
    1. If word is the empty string:
      1. Add a 'true' node with key "end" (in our case set, trieNode["end"] =  true)
      2. Return
    2. If trieNode does not have a child labeled with the first character of `word`:
      1. Add a child labeled with that character to trieNode
    3. Let `newWord` equal `word` but with the first character removed
    4. Let `newNode` be the child of trieNode labeled with the first character of `word`
    5. Recursively call addWord(newWord, newNode)
  </pre>

  Call this algorithm starting with the input word and the root of the trie (<code>this.data</code>).
  There are some simple test cases in the code to help get you started.
  Don't forget to convert the input to upper case!

  ___TODO___: Implement <code>getSuggestions</code>.

  This one is a little trickier than <code>addWord</code>, and you won't have pseudocode to guide
  you through this time. In order to get the suggestions for a given prefix, you'll need to first
  see if _any_ word starting with the prefix is in the trie by traversing from the root. If there are
  words starting with that prefix, then you should return an array of all of them. Keep in mind that in
  this trie implementation, having an "end" key means that a node is the end of a valid word in the trie.

  If no words are found, then this method should return the empty array.
  Again, there are some simple test cases in the code to help get you started.
  Again, don't forget to convert the input to upper case!

  Make sure you have implemented Trie correctly before going on to the next part of the assignment.

  ### Part 2: AJAX and Promises (promisifiedAjaxSimple.js, promisifiedAjax.js)

  In this section we are going to use promises to grab dictionary data from a public server. Just
  like Penn Course Review, the words we are going to work with will be the names of classes at Penn.

  ___TODO___: Implement <code>ajaxGet</code>.

  This function takes in a URL that points to some JSON and returns a promise that resolves to the
  JSON data. Use Bluebird; this should be a one-liner.

  ___TODO___: Implement <code>trieFromURL</code>.

  This function takes in a URL that points to some JSON and returns a promise that resolves to a
  trie formed from the JSON data. Use ajaxGet; this should be <5 lines.

  ___TODO___: Implement <code>multiGet</code>.

  This method takes in a URL that represents more documents to get, and a base URL for those documents.
  It returns a promise for an array that represents all the data from all the documents (do not include
  the original document from the URL in this array).

  See stub for step-by-step detailed instructions.

  __HINT__: Use [Promise.all](https://github.com/petkaantonov/bluebird/blob/master/API.md#all---promise)

  ___TODO___: Implement <code>trieFromDataPromise</code>.

  This method takes in a promise for data (a string array)and returns a trie constructed from that data.
  Use multiGet; this should be <5 lines. There is a test case to make sure this method is working correctly.

  ### Part 3: AppView

  Now that we can make tries from remotely-hosted JSON dictionaries, all that's left is to implement
  the autocompleter in HTML code. Luckily, we've taken care of the CSS and the templating for you. All
  you need to do is implement a few missing methods on appView.

  ___TODO___: Define <code>events</code> in AppView.

  The events app should do a search (the next method to do) every time a key is pressed. You will
  find the [Backbone Views documentation](http://backbonejs.org/#View) useful here!

  ___TODO___: Define a <code>search</code> in AppView.

  This function should be called every time a keypress is detected. It will use the trie promise
  passed in during view initialization to give back suggestions for autocompletion and then call
  <code>render</code> with the suggestions array as an argument.

  When you're all done it should look something like this:

  ![Demo](https://i.imgur.com/aBziSGM.gif)

  You can comment/uncomment the two different implementations (one JSON file vs. multiple JSON files)
  in __main.js__ (this demo uses the one-file implementation);


  ### Notes

  As a general rule, please remove "TODO" comment blocks after you implement that
  portion of the assignment.

  ___Extra Credit___ (3pts): Implement "ExtraCreditTrie" (in ExtraCreditTrie.js). This trie functions
  very similarly to the simple trie that we implemented in part 1, except that it is
  __partially case-insensitive__. That is, the trie distinguishes between different capitalizations
  when adding words; but when getting suggestions, it returns _all_ matches, _regardless of case_,
    _in the original case they were added_.

  To give a concrete example: you could add "PennApps", "Upenn", and "Pennapps" to an ExtraCreditTrie. Then running
  getSuggestions('penn') would return the array ["PennApps", "Pennapps"].

  ___Extra Credit___ (2pts): Modify ExtraCreditTrie so that it can start matching at any point in the
  a word. For instance, you could add "PennApps", "Upenn", and "pineapple" to an ExtraCreditTrie. 
  Then running getSuggestions('app') would return the array ["PennApps", "pineapple"].


