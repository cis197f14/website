:markdown
  Final Project Proposal
  ======================

  Due _Wednesday, April 16 at 9AM_.

  The final project will be an opportunity to work on any kind of JavaScript
  project of your choosing that demonstrates the things you learned this
  semester. These projects will generally fall into one of 3 categories:

  1. Client-heavy application (like a game or other complex UI).
  2. Full-stack application (that does something interesting with the internet,
     maybe with a 3rd party API)
  3. Node.js application or library

  You are welcome to use any JavaScript framework, including Backbone, its
  extensions, Express.js, and others.

  _Another option_ altogether is to contribute to an open source JavaScript
  framework or library. See some ideas below.

  __Group work__: you may form a _teams of two students_ for the final
  project; keep in mind that you will still have to demonstrate 10-15 hours of
  work per student.

  #### Ideas to get you started

  * Browser-based game (more full-fledged Pokémon, Chess, Sudoku, Connect 4,
    Othello, etc.) or game AI
  * Interactive data visualization (like
    [New York Times stuff](http://www.nytimes.com/newsgraphics/2013/12/30/year-in-interactive-storytelling/))
  * Chrome extension to add better UI functionality to an existing web app
    (like Gmail, Google Calendar, Facebook, Twitter, etc.)
  * Mobile web application (a new one or a rewrite of an existing mobile app)
  * Spotify App that runs in the Spotify desktop client
    ([see docs](https://developer.spotify.com/technologies/apps/))
  * Desktop application written in JS using
    [node-webkit](https://github.com/rogerwang/node-webkit)

  #### Resources for inspiration

  * [Chrome Experiments](http://www.chromeexperiments.com/)
  * [Mozilla Demo Studio](https://developer.mozilla.org/en-US/demos/)

  #### Useful / interesting libraries to use or hack on

  * [D3](http://d3js.org) (data visualization library)
  * [three.js](http://threejs.org/) (3D library)
  * [Leaflet](http://leafletjs.com/) (interactive maps)
  * [gmaps.js](http://hpneo.github.io/gmaps/) (Google Maps abstraction)
  * [Rickshaw](http://code.shutterstock.com/rickshaw/) (charts / graphs)
  * [Chart.js](http://www.chartjs.org/) (charts / graphs)
  * [Raphael](http://raphaeljs.com/) (vector graphics library)
  * [Paper.js](http://paperjs.org/) (vector graphics library)
  * [Packery](http://packery.metafizzy.co/) (bin-packing layout)
  * [CAAT](http://labs.hyperandroid.com/static/caat/) (animation toolkit)
  * [PathFinding.js](http://qiao.github.io/PathFinding.js/visual/) (path finding for games, etc.)
  * [verlet-js](https://github.com/subprotocol/verlet-js) (physics engine)
  * [ScrollMagic](http://janpaepke.github.io/ScrollMagic/) (UI scrolling)
  * [RSVP.js](https://github.com/tildeio/rsvp.js) (promises)
  * [Numbers.js](https://github.com/sjkaliski/numbers.js) (adv. Math library)
  * [Lodash](http://lodash.com/) (utility belt that's better than Underscore)
  * [Moment.js](http://momentjs.com/) (date library)
  * [Handlebars.js](http://handlebarsjs.com/) (templating)
  * [Backbone.Marionette](http://marionettejs.com/) (Backbone extension)
  * [Ember](http://emberjs.com/) (MV\* framework)
  * [AngularJS](http://angularjs.org/) (MV\* framework)
  * [React](http://facebook.github.io/react/) (UI library)
  * [Brick](https://github.com/mozilla/brick) (web UI components)
  * [Socket.io](http://socket.io/) (WebSockets for Node)
  * [Passport](https://github.com/jaredhanson/passport) (authentication for Node)
  * [Meteor](https://www.meteor.com/) (realtime full-stack JS)
  * [Bootstrap](http://getbootstrap.com/) (style & layout library)
  * [Foundation](http://foundation.zurb.com/) (style & layout library)
  * [Chosen](http://harvesthq.github.io/chosen/) (better select boxes)
  * [pickadate.js](http://amsul.ca/pickadate.js/) (better date picker)
  * [Messenger](http://github.hubspot.com/messenger/) (UI notifications, alerts)
  * [Parsley](http://parsleyjs.org/) (form validation)
  * [Mousetrap](http://craig.is/killing/mice) (capture user input)
  * [jquery-pjax](https://github.com/defunkt/jquery-pjax) (pushState + ajax)
  * [List.js](http://www.listjs.com/) (adv. functionality for UI lists)
  * [typeahead.js](http://twitter.github.io/typeahead.js/) (autocomplete library)
  * [Animate.css](http://daneden.github.io/animate.css/) (CSS animations)
  * [Offline.js](http://github.hubspot.com/offline/docs/welcome/)
    (handle offline behavior)

  Also check out [Github explore](https://github.com/explore) for more
  libraries.

  #### Other open source projects to hack on

  * [Mondrian.io](http://mondrian.io/) vector drawing app
  * [Adobe Brackets](http://brackets.io/) code editor
  * [Ace](http://ace.c9.io/) code editor
  * [Ghost](https://github.com/TryGhost/Ghost) blogging platform
  * [statsd](https://github.com/etsy/statsd) stats aggregator daemon

  You might get some more ideas by looking at the
  [most popular Github repositories](https://github.com/search?l=JavaScript&p=1&q=stars%3A%3E1&s=stars&type=Repositories).

  If you need to brush up on HTML/CSS for the purpose of designing a nice
  front end interface, I recommend
  [An Advanced Guide to HTML & CSS](http://learn.shayhowe.com/advanced-html-css/).

  -------------------------------

  ## Proposal Specification

  By _April 16th at 9AM_, please submit a project proposal outlining your ideas
  and aspirations for the final project. Your submission should have at least
  300 words. Try to answer questions like the following:

  * What kind of project do you propose?
  * What do you hope to learn from the project?
  * What are some concrete goals, i.e. how will we judge the success of your
    project?
  * (If you're contributing to an open source project) Which bugs are you
    fixing? Which additional features are you implementing?

  In addition, we expect you to do some project research at this point and
  include a rough outline of your implementation plans. You might answer
  questions like:

  * Which libraries will you use?
  * Which JavaScript design patterns will be important (e.g., MVC)?
  * What will the interface look like (visual and/or programmatic)? We'd love to
    see UI mockups if you have them.

  #### Submission instructions

  To create this submission, please create a new branch in your homework repo
  called `final`. Add a folder at the root called `final/` and markdown document
  within this folder called `proposal.md`.  (If you don't know markdown syntax,
  [check it out here](http://daringfireball.net/projects/markdown/syntax).
  It's fairly easy to learn and considered useful language for simple
  documents -- this website is powered by markdown.)

  If you plan on including any images in the proposal, please organize them
  into a folder at `final/images` and use markdown's image linking syntax.
  Markdown support is built into Github so if you created your document
  correctly, it should show up nicely formatted when you access the `.md` file
  on the Github website.

  Submit the new file(s) using a pull request called "Final Project Proposal"
  __from the `final` branch to the `master` branch__.

  _If you are working in a group_: only one person needs to make this
  submission. Be sure to include both group members' names in the proposal.

  -------------------------------

  ## Project Demos

  The demo day time slot is TBD, but it will be during finals period. We'll get
  a room and have some food / drinks. It'll be fun and you'll get to see what
  cool things your classmates built.
  
  You will be required to submit a short writeup along with the final code
  submission (due on demo day). _More details about this coming soon_.

  -------------------------------

  ## Final Project Grading

  * (15%) __Project Proposal__: Your proposal should be on time, answer the
    important questions about the project, and show evidence of some research.

  * (25%) __Style__: Your project should use good code style and be properly
    documented.

  * (25%) __Correctness__: Your project should be free of errors and should
    correctly accomplish whatever it is supposed to accomplish. This means that
    if the deadline is looming, your time would be better spent fixing bugs in
    what you already have than adding one last feature.

  * (35%) __Effort / Accomplishment__: We will be looking for evidence that you
    put energy and effort (~10-15 hours per person) into your project and that you have
    learned something. This is where the document you submit along with your
    project comes in: be sure to use it to highlight work you did and things you
    learned, especially if it is not obvious from looking at the final product.
    For example, if you spent two hours trying an approach that ultimately did
    not work, you should write about that and what you learned from the
    experience. However, we will not necessarily look with sympathy on
    _unnecessary_ work: for example, if you spent five hours trying to track
    down a bug without asking for help, that’s just plain silly stubbornness.
    If you are stuck on something, please ask for help. We want you to spend
    your time making progress on your project, not banging your head against a
    wall (although a small amount of head-banging can be healthy).

